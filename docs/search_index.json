[["index.html", "An Electricity Profiles About", " An Electricity Profiles Puttipong Chunark, Ph.D. 2023-06-21 About This webpage is created to understand the electricity load profile at all levels. R coding techniques are included. Readers can learn how to code the R language in the format of scripts, R markdown, and bookdown. "],["introduction.html", "Chapter 1 Introduction", " Chapter 1 Introduction Electricity is one of the key final energy to drive an economy. It is used to provide enduse demands. For instance, charging electric vehicles (EVs), lighting houses, heating water and cooking, driving motors to convey products in industrial processes. In 2021, an electricity consumption was 201,986 GWh. "],["electricity-profiles.html", "Chapter 2 Electricity profiles 2.1 Initial settings 2.2 The EGAT electrity sale profiles", " Chapter 2 Electricity profiles This chapter provides electricity profiles and a R coding technique. Electricity profiles are illustrated to give an insight into profile behavior. R coding technique are given in order to understand the process flow and manage the big data obtained from several sources in the organization. 2.1 Initial settings Before the project starts, packages are required as follows: A tidyverse package is a bunch of packages to handle with a data analysis (for more information click here). It consists of data manipulation and visualization as follows: A ggplot2 package is for data visualization. A dplyr package is for data manipulation. A tidyr package is for data tidying. A readr package is for data import. A purrr package is for functional programming. A tibble package is a modern reimagining of the data.frame. A stringr package is for strings. A forcats package is for factors. A lubridate package is for date and time. A readxl package is used for read data from Excel into R. A scales package is applied to scale plots in the ggplot2 package. A glue package interprets strings literal. The package embeds R expressions and inserts into argument string. A knitr package is a lightweight API’s designed to give users full control of the output without heavy coding work. In this project, the package is used for making a HTML. library(tidyverse) #For data manipulation library(readxl) #For reading the excel sheet library(scales) library(glue) library(knitr) library(plotly) Theme and lines for figures are set in a variable named Themeline as follows: theme_bw() function provides a black and white theme. theme() function applied for setting theme and line represented in plots. linepalette1 and linepalette1 variables set line colors. ThemeLine &lt;- theme_bw() + theme( panel.border=element_rect(fill=NA), panel.grid.minor = element_line(color = NA), # axis.title=element_text(size=5), # axis.text.x = element_text(hjust=1,size = 10, angle = 0), axis.line=element_line(colour=&quot;black&quot;), panel.background=element_rect(fill = &quot;white&quot;), panel.grid.major.x=element_line(linetype=&quot;dashed&quot;,colour=&quot;grey&quot;,linewidth = 0.5), panel.grid.major.y = element_blank(), # panel.grid.major=element_blank(), strip.background=element_rect(fill=&quot;white&quot;, colour=&quot;white&quot;), strip.text.x = element_text(size=10, colour = &quot;black&quot;, angle = 0,face=&quot;bold&quot;), axis.text.x=element_text(size = 10,angle=45, vjust=0.9, hjust=1, margin = unit(c(t = 0.3, r = 0, b = 0, l = 0), &quot;cm&quot;)), axis.text.y=element_text(size = 10,margin = unit(c(t = 0, r = 0.3, b = 0, l = 0), &quot;cm&quot;)), legend.text = element_text(size = 10), legend.title = element_text(size = 10), axis.ticks.length=unit(-0.15,&quot;cm&quot;) ) linepalette1 &lt;- c(&quot;#4DAF4A&quot;,&quot;#FF7F00&quot;,&quot;#377EB8&quot;,&quot;#E41A1C&quot;,&quot;#984EA3&quot;,&quot;#F781BF&quot;,&quot;#8DD3C7&quot;,&quot;#FB8072&quot;,&quot;#80B1D3&quot;,&quot;#FDB462&quot;,&quot;#B3DE69&quot;,&quot;#FCCDE5&quot;,&quot;#D9D9D9&quot;,&quot;#BC80BD&quot;,&quot;#CCEBC5&quot;,&quot;#FFED6F&quot;,&quot;#7f878f&quot;,&quot;#A65628&quot;,&quot;#FFFF33&quot;) linepalette2 &lt;- c(&quot;#E41A1C&quot;,&quot;#FF7F00&quot;,&quot;#377EB8&quot;,&quot;#B3DE69&quot;,&quot;#4DAF4A&quot;,&quot;#984EA3&quot;,&quot;#F781BF&quot;,&quot;#8DD3C7&quot;,&quot;#FB8072&quot;,&quot;#80B1D3&quot;,&quot;#FDB462&quot;,&quot;#FCCDE5&quot;,&quot;#D9D9D9&quot;,&quot;#BC80BD&quot;,&quot;#CCEBC5&quot;,&quot;#FFED6F&quot;,&quot;#7f878f&quot;,&quot;#A65628&quot;,&quot;#FFFF33&quot;) Lists are create to store variables. #----- Make a list of profile to store data -----#### profiledata &lt;- list() profilefigure &lt;- list() summarydata &lt;- list() #----- Make variable for output directory -----#### outfigdir &lt;- c(&quot;figures/&quot;) 2.2 The EGAT electrity sale profiles 2.2.1 The 2019 MEA EGAT sale profile The electricity sale profile from EGAT is given by the Power System Control and Operation Division (ฝ่ายควบคุมระบบกำลังไฟฟ้า). #----- The 2019 MEA EGAT sale profile ----#### # Profile data #### profile &lt;- read_excel(&quot;raw_data/raw_data_profiles/02_Hourly Sale_NetGen_2019.xlsx&quot;, sheet = &quot;Load Curve&quot;, range = &quot;C3:D17523&quot; ) %&gt;% select(datetime = `Date/Time`, MEA) %&gt;% mutate(date = date(datetime), time = format(as.POSIXct(datetime),&quot;%H:%M:%S&quot;), year = year(datetime), month = month(datetime), day = day(datetime)) %&gt;% select(datetime, date, time, year, month, day, MEA) Table 2.1: The 2019 EGAT sale to MEA profile datetime date time year month day MEA 2019-01-01 00:00:00 2019-01-01 00:00:00 2019 1 1 3361.083 2019-01-01 00:30:00 2019-01-01 00:30:00 2019 1 1 3244.405 2019-01-01 01:00:00 2019-01-01 01:00:00 2019 1 1 3199.672 2019-01-01 01:30:00 2019-01-01 01:30:00 2019 1 1 3153.101 2019-01-01 02:00:00 2019-01-01 02:00:00 2019 1 1 3085.642 The peak, minimun in the unit of MW, and an electricity sale to MEA in GWh from the profile are calculated. The electricity sale to MEA (in GWh) is calculated by the summation of profile in MW divided by 2000. The reason to divide by 2,000 is that the profile is given a time stamp in every 30-min. There are 17,520 values. Therefore, the profile is divided by 2 to get the results in every 1 hr.. We divided the output by 1,000 to convert the unit from MWh to GWh (see equation (2.1)). \\[\\begin{equation} Ene_{t}=\\frac{\\sum_{i=1}^{17520} (profile_{t,i})}{2*1000} \\tag{2.1} \\end{equation}\\] Where, \\(Ene_{t}\\) denotes an calculated energy (electricity) in year \\(t\\). \\(profile_{t,i}\\) denotes a generation in the unit of MW in year \\(t\\) at a time stamp \\(i\\). \\(i\\) denotes a time stamp in a 30-minute interval. Therefore, there are 17,520 intervals in a year (8,760 hrs.). # Summary data #### maxv &lt;- ceiling(max(profile$MEA)) # Get a peak MW minv &lt;- floor(min(profile$MEA)) # Get a min MW energy &lt;- sum(profile$MEA)/2000 # Calculate the energy The peak and minimum MW days are also needed to assess in order to provide the maximum and minimum a saled electricity from EGAT to MEA. peak_day &lt;- profile %&gt;% #Find a peak day group_by(year) %&gt;% filter(MEA == max(MEA)) %&gt;% pull(datetime) min_day &lt;- profile %&gt;% #Find a peak day group_by(year) %&gt;% filter(MEA == min(MEA)) %&gt;% pull(datetime) Load factor is calculated by the energy in equation (2.1) divided a maximum energy. A maximum energy is the peak multiplied by 8760 hours. Result is presented in a percentage. \\[\\begin{equation} LF_{t}=\\frac{Energy_{t}}{Peak_{d,h} * 8760}*100 \\tag{2.2} \\end{equation}\\] Where, \\(LF_{t}\\) denotes the load factor at year \\(t\\) in percentage. \\(Energy_{t}\\) denotes the calculated energy from equation (2.1) at year \\(t\\) in GWh. \\(Peak_{d,h}\\) denotes the peak electricity sale on the date \\(d\\) at time \\(h\\). load_factor &lt;- percent((energy*10^3)/(maxv*8760), accuracy = 0.01, decimal.mark = &quot;.&quot;) Create a table to store relevant data. summary &lt;- tibble(peak_day = peak_day, min_day = min_day, peak_mw = maxv, min_mw = minv, energy_gwh = energy, load_factor = load_factor) # combine all data in 1 table In 2019, the electricity sale to MEA by EGAT reached it peak 9,526 MW on 2019-04-25 14:00:00. The energy (electricity) sale to MEA was 54,939.73 GWh. The summary of the electricity sale to MEA by EGAT in 2019 is given in Table 2.2. Table 2.2: Summary of EGAT sale to MEA in 2019 peak_day min_day peak_mw min_mw energy_gwh load_factor 2019-04-25 14:00:00 2019-01-01 05:00:00 9526 2748 54939.73 65.84% The 2019 electricity sale profile from EGAT to MEA is illustrated (see Figure 2.1). profile_plot &lt;- ggplot() + geom_line(data=profile, aes(x = datetime, y = MEA, group = month, color = as.factor(month)), show.legend = FALSE) + ThemeLine + labs(x = NULL, y = &quot;EGAT sale to MEA (MW)&quot;)+ scale_x_datetime(breaks=date_breaks(&quot;1 month&quot;), labels=date_format(&quot;%b %y&quot;)) + scale_y_continuous(breaks = seq(0, round(maxv,-3),1000), limits = c(0, round(maxv, -3))) + scale_color_manual(values = linepalette1) + geom_point(data=summary, aes(x = peak_day, y = peak_mw))+ geom_text(data = summary, aes(x = peak_day, y = round(maxv, -3)), label = glue(&quot;Peak {maxv} MW \\n@ {peak_day}&quot;))+ geom_point(data=summary, aes(x = min_day, y = min_mw))+ geom_text(data = summary, aes(x = min_day, y = round(minv, -3)), label = glue(&quot;Minimum {minv} MW \\n@ {min_day}&quot;), hjust = 0, vjust = 1.5) Figure 2.1: EGAT electricity sale profile to MEA in 2019. Outputs are saved. Outputs are listed as follows: Create a file name mea_egtsle_2019.png Save a plot in a directory using ggsave() function Save profile data in a profiledata list Save figures in a profilefigure list Save summary data in a summarydata list outputfigure &lt;- paste0(outfigdir, &quot;mea_egtsle_2019.png&quot;) ggsave(profile_plot, file = outputfigure, dpi = 150, width = 15, height = 5, units = &quot;in&quot;, limitsize = FALSE) profiledata &lt;- c(profiledata, list(&quot;mea_egtsle_2019&quot; = profile)) profilefigure &lt;- c(profilefigure, list(&quot;mea_egtsle_2019&quot; = profile_plot)) summarydata &lt;- c(summarydata, list(&quot;sum_mea_egtsle_2019&quot; = summary)) 2.2.2 The 2019 PEA-R1 (Central region) EGAT sale profile Read a profile data profile &lt;- read_excel(&quot;raw_data/raw_data_profiles/02_Hourly Sale_NetGen_2019.xlsx&quot;, sheet = &quot;Load Curve&quot;, range = &quot;C3:E17523&quot; ) %&gt;% select(datetime = `Date/Time`, PEA_R1) %&gt;% mutate(date = date(datetime), time = format(as.POSIXct(datetime),&quot;%H:%M:%S&quot;), year = year(datetime), month = month(datetime), day = day(datetime)) %&gt;% select(datetime, date, time, year, month, day, PEA_R1) Table 2.3: The 2019 EGAT sale to PEA R1 profile datetime date time year month day PEA_R1 2019-01-01 00:00:00 2019-01-01 00:00:00 2019 1 1 5036.982 2019-01-01 00:30:00 2019-01-01 00:30:00 2019 1 1 4907.355 2019-01-01 01:00:00 2019-01-01 01:00:00 2019 1 1 4929.126 2019-01-01 01:30:00 2019-01-01 01:30:00 2019 1 1 4793.341 2019-01-01 02:00:00 2019-01-01 02:00:00 2019 1 1 4789.811 maxv &lt;- ceiling(max(profile$PEA_R1)) # Get a peak MW minv &lt;- floor(min(profile$PEA_R1)) # Get a min MW energy &lt;- sum(profile$PEA_R1)/2000 # Calculate the energy peak_day &lt;- profile %&gt;% #Find a peak day group_by(year) %&gt;% filter(PEA_R1 == max(PEA_R1)) %&gt;% pull(datetime) min_day &lt;- profile %&gt;% #Find a peak day group_by(year) %&gt;% filter(PEA_R1 == min(PEA_R1)) %&gt;% pull(datetime) load_factor &lt;- percent((energy*10^3)/(maxv*8760), accuracy = 0.01, decimal.mark = &quot;.&quot;) summary &lt;- tibble(peak_day = peak_day, min_day = min_day, peak_mw = maxv, min_mw = minv, energy_gwh = energy, load_factor = load_factor) Table 2.4: Summary of EGAT sale to PEA R1 in 2019 peak_day min_day peak_mw min_mw energy_gwh load_factor 2019-05-03 23:00:00 2019-01-01 12:00:00 11936 3293 80961.36 77.43% The 2019 electricity sale profile from EGAT to PEA-R1 is illustrated (see Figure 2.2). profile_plot &lt;- ggplot() + geom_line(data=profile, aes(x = datetime, y = PEA_R1, group = month, color = as.factor(month)), show.legend = FALSE) + ThemeLine + labs(x = NULL, y = &quot;EGAT sale to PEA R1 (Central region) (MW)&quot;)+ scale_x_datetime(breaks=date_breaks(&quot;1 month&quot;), labels=date_format(&quot;%b %y&quot;)) + scale_y_continuous(breaks = seq(0, round(maxv,-3),1000), limits = c(0, round(maxv, -3))) + scale_color_manual(values = linepalette1) + geom_point(data=summary, aes(x = peak_day, y = peak_mw))+ geom_text(data = summary, aes(x = peak_day, y = round(maxv, -3)), label = glue(&quot;Peak {maxv} MW \\n@ {peak_day}&quot;))+ geom_point(data=summary, aes(x = min_day, y = min_mw))+ geom_text(data = summary, aes(x = min_day, y = round(minv, -3)), label = glue(&quot;Minimum {minv} MW \\n@ {min_day}&quot;), hjust = 0, vjust = 1.5) Figure 2.2: EGAT electricity sale profile to PEA-R1 in 2019. outputfigure &lt;- paste0(outfigdir, &quot;pea_r1_central_egtsle_2019.png&quot;) ggsave(profile_plot, file = outputfigure, dpi = 150, width = 15, height = 5, units = &quot;in&quot;, limitsize = FALSE) profiledata &lt;- c(profiledata, list(&quot;pea_r1_central_egtsle_2019&quot; = profile)) profilefigure &lt;- c(profilefigure, list(&quot;pea_r1_central_egtsle_2019&quot; = profile_plot)) summarydata &lt;- c(summarydata, list(&quot;sum_pea_r1_central_egtsle_2019&quot; = summary)) 2.2.3 The 2019 PEA-R2 (North Eastern region) EGAT sale profile # Profile data #### profile &lt;- read_excel(&quot;raw_data/raw_data_profiles/02_Hourly Sale_NetGen_2019.xlsx&quot;, sheet = &quot;Load Curve&quot;, range = &quot;C3:F17523&quot; ) %&gt;% select(datetime = `Date/Time`, PEA_R2) %&gt;% mutate(date = date(datetime), time = format(as.POSIXct(datetime),&quot;%H:%M:%S&quot;), year = year(datetime), month = month(datetime), day = day(datetime)) %&gt;% select(datetime, date, time, year, month, day, PEA_R2) #%&gt;% # mutate(strdatetime = as.factor(strptime(glue(&quot;{year}-{month}-{day} {time}&quot;), &quot;%Y-%m-%d %H:%M:%S&quot;))) Table 2.5: The 2019 EGAT sale to PEA R2 profile datetime date time year month day PEA_R2 2019-01-01 00:00:00 2019-01-01 00:00:00 2019 1 1 1459.520 2019-01-01 00:30:00 2019-01-01 00:30:00 2019 1 1 1415.846 2019-01-01 01:00:00 2019-01-01 01:00:00 2019 1 1 1350.192 2019-01-01 01:30:00 2019-01-01 01:30:00 2019 1 1 1287.925 2019-01-01 02:00:00 2019-01-01 02:00:00 2019 1 1 1231.863 # Summary data #### maxv &lt;- ceiling(max(profile$PEA_R2)) # Get a peak MW minv &lt;- floor(min(profile$PEA_R2)) # Get a min MW energy &lt;- sum(profile$PEA_R2)/2000 # Calculate the energy peak_day &lt;- profile %&gt;% #Find a peak day group_by(year) %&gt;% filter(PEA_R2 == max(PEA_R2)) %&gt;% pull(datetime) min_day &lt;- profile %&gt;% #Find a peak day group_by(year) %&gt;% filter(PEA_R2 == min(PEA_R2)) %&gt;% pull(datetime) load_factor &lt;- percent((energy*10^3)/(maxv*8760), accuracy = 0.01, decimal.mark = &quot;.&quot;) summary &lt;- tibble(peak_day = peak_day, min_day = min_day, peak_mw = maxv, min_mw = minv, energy_gwh = energy, load_factor = load_factor) # combine all data in 1 table Table 2.6: Summary of EGAT sale to PEA R1 in 2019 peak_day min_day peak_mw min_mw energy_gwh load_factor 2019-04-20 21:00:00 2019-01-01 12:00:00 3803 970 20007.86 60.06% # Plot a profile #### profile_plot &lt;- ggplot() + geom_line(data=profile, aes(x = datetime, y = PEA_R2, group = month, color = as.factor(month)), show.legend = FALSE) + ThemeLine + labs(x = NULL, y = &quot;EGAT sale to PEA R2 (North Eastern region) (MW)&quot;)+ scale_x_datetime(breaks=date_breaks(&quot;1 month&quot;), labels=date_format(&quot;%b %y&quot;)) + scale_y_continuous(breaks = seq(0, round(maxv,-3),1000), limits = c(0, round(maxv, -3))) + scale_color_manual(values = linepalette1) + geom_point(data=summary, aes(x = peak_day, y = peak_mw))+ geom_text(data = summary, aes(x = peak_day, y = round(maxv, -3)), label = glue(&quot;Peak {maxv} MW \\n@ {peak_day}&quot;))+ geom_point(data=summary, aes(x = min_day, y = min_mw))+ geom_text(data = summary, aes(x = min_day, y = round(minv, -3)), label = glue(&quot;Minimum {minv} MW \\n@ {min_day}&quot;), hjust = 0, vjust = 1.5) # Save the output #### outputfigure &lt;- paste0(outfigdir, &quot;pea_r2_northeastern_egtsle_2019.png&quot;) ggsave(profile_plot, file = outputfigure, dpi = 150, width = 15, height = 5, units = &quot;in&quot;, limitsize = FALSE) profiledata &lt;- c(profiledata, list(&quot;pea_r2_northeastern_egtsle_2019&quot; = profile)) profilefigure &lt;- c(profilefigure, list(&quot;pea_r2_northeastern_egtsle_2019&quot; = profile_plot)) summarydata &lt;- c(summarydata, list(&quot;sum_pea_r2_northeastern_egtsle_2019&quot; = summary)) The 2019 electricity sale profile from EGAT to PEA-R2 is illustrated in Figure 2.3). Figure 2.3: EGAT electricity sale profile to PEA-R2 in 2019. "],["parts.html", "Chapter 3 Parts", " Chapter 3 Parts You can add parts to organize one or more book chapters together. Parts can be inserted at the top of an .Rmd file, before the first-level chapter heading in that same file. Add a numbered part: # (PART) Act one {-} (followed by # A chapter) Add an unnumbered part: # (PART\\*) Act one {-} (followed by # A chapter) Add an appendix as a special kind of un-numbered part: # (APPENDIX) Other stuff {-} (followed by # A chapter). Chapters in an appendix are prepended with letters instead of numbers. "],["footnotes-and-citations.html", "Chapter 4 Footnotes and citations 4.1 Footnotes 4.2 Citations", " Chapter 4 Footnotes and citations 4.1 Footnotes Footnotes are put inside the square brackets after a caret ^[]. Like this one 1. 4.2 Citations Reference items in your bibliography file(s) using @key. For example, we are using the bookdown package (Xie 2023) (check out the last code chunk in index.Rmd to see how this citation key was added) in this sample book, which was built on top of R Markdown and knitr (Xie 2015) (this citation was added manually in an external file book.bib). Note that the .bib files need to be listed in the index.Rmd with the YAML bibliography key. The RStudio Visual Markdown Editor can also make it easier to insert citations: https://rstudio.github.io/visual-markdown-editing/#/citations References "],["blocks.html", "Chapter 5 Blocks 5.1 Equations 5.2 Theorems and proofs 5.3 Callout blocks", " Chapter 5 Blocks 5.1 Equations Here is an equation. \\[\\begin{equation} f\\left(k\\right) = \\binom{n}{k} p^k\\left(1-p\\right)^{n-k} \\tag{5.1} \\end{equation}\\] You may refer to using \\@ref(eq:binom), like see Equation (5.1). 5.2 Theorems and proofs Labeled theorems can be referenced in text using \\@ref(thm:tri), for example, check out this smart theorem 5.1. Theorem 5.1 For a right triangle, if \\(c\\) denotes the length of the hypotenuse and \\(a\\) and \\(b\\) denote the lengths of the other two sides, we have \\[a^2 + b^2 = c^2\\] Read more here https://bookdown.org/yihui/bookdown/markdown-extensions-by-bookdown.html. 5.3 Callout blocks The R Markdown Cookbook provides more help on how to use custom blocks to design your own callouts: https://bookdown.org/yihui/rmarkdown-cookbook/custom-blocks.html "],["sharing-your-book.html", "Chapter 6 Sharing your book 6.1 Publishing 6.2 404 pages 6.3 Metadata for sharing", " Chapter 6 Sharing your book 6.1 Publishing HTML books can be published online, see: https://bookdown.org/yihui/bookdown/publishing.html 6.2 404 pages By default, users will be directed to a 404 page if they try to access a webpage that cannot be found. If you’d like to customize your 404 page instead of using the default, you may add either a _404.Rmd or _404.md file to your project root and use code and/or Markdown syntax. 6.3 Metadata for sharing Bookdown HTML books will provide HTML metadata for social sharing on platforms like Twitter, Facebook, and LinkedIn, using information you provide in the index.Rmd YAML. To setup, set the url for your book and the path to your cover-image file. Your book’s title and description are also used. This gitbook uses the same social sharing data across all chapters in your book- all links shared will look the same. Specify your book’s source repository on GitHub using the edit key under the configuration options in the _output.yml file, which allows users to suggest an edit by linking to a chapter’s source file. Read more about the features of this output format here: https://pkgs.rstudio.com/bookdown/reference/gitbook.html Or use: ?bookdown::gitbook "],["references.html", "References", " References "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
